{"meta":{"title":"CodePaste","subtitle":null,"description":null,"author":"Joshua Youngjae Ji","url":"https://zirho.github.io"},"pages":[],"posts":[{"title":"Private properties for ES6 JavaScript","slug":"es6-privacy","date":"2016-06-10T21:52:05.000Z","updated":"2016-06-10T22:56:16.000Z","comments":true,"path":"2016/06/10/es6-privacy/","link":"","permalink":"https://zirho.github.io/2016/06/10/es6-privacy/","excerpt":"","text":"In ES5 JavaScript, it is relatively easy to have private properties in prototype definition. It goes like this. 1234567891011121314151617181920212223242526272829303132333435363738394041// es5 constructor(as class) definition // JavaScript is prototype-based languagefunction Person(firstname, lastname) &#123; // public property this.firstname = firstname; this.lastname = lastname; // private property var records = [&#123;type: 'in', amount: 0&#125;]; // public function // it needs to be instance method to access private properties this.addTransaction = function(trans) &#123; if (trans.hasOwnProperty('type') &amp;&amp; trans.hasOwnProperty('amount')) &#123; records.push(trans); &#125; &#125; // public function this.getBalance = function() &#123; var total = 0; records.forEach(function(record)&#123; if (record.type === 'in') &#123; total += record.amount; &#125; else &#123; total -= record.amount; &#125; &#125;); return total; &#125;&#125;// Prototype functionPerson.prototype.getFullName = function() &#123; return this.firstname + \" \" + this.lastname;&#125;;module.exports = Person; Although, in es6, it is not that easy to achieve and there are many options you can choose. You can find all of those here, Managing private data, JS class definition In my opinion, weekmap method is the best, if you need perfect privacy. Other than that, you could use conventional approach using underscore(_) in front of private property names. But I found most cases can be solved by modularity approach which looks something like the code below. In a file such as person.js 12345678910111213141516171819202122232425262728293031let records = [&#123;type: 'in', amount: 0&#125;];export class Person &#123; constructor(first, last) &#123; this.firstname = first; this.lastname = last; &#125; addTransaction(trans) &#123; if (trans.hasOwnProperty('type') &amp;&amp; trans.hasOwnProperty('amount')) &#123; records.push(trans); &#125; &#125; getBalance() &#123; let total = 0; records.forEach(record =&gt; &#123; total += record.amount; &#125;); return total; &#125; getFullName() &#123; return `$&#123;this.firstname&#125; $&#123;this.lastname&#125;`; &#125;&#125; record property is used as a private data storage and can NOT be accessed out of the modular scope. To use this class, you can just import and use. Below are unit tests that I wrote against to the Person class. 1234567891011121314151617import &#123; Person &#125; from './person.js';describe('Person es6 class', function () &#123; var person; beforeEach(function () &#123; person = new Person('Andrew', 'Lincoln'); &#125;); it('should be initiated with first name and last name', function () &#123; expect(person.getFullName()).toEqual('Andrew Lincoln'); &#125;); it(\"should be initiated with 0 balance\", function() &#123; expect(person.getBalance()).toEqual(0); &#125;);&#125;); Hope this helps.","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zirho.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zirho.github.io/tags/JavaScript/"},{"name":"es6","slug":"es6","permalink":"https://zirho.github.io/tags/es6/"},{"name":"es2015","slug":"es2015","permalink":"https://zirho.github.io/tags/es2015/"},{"name":"private property","slug":"private-property","permalink":"https://zirho.github.io/tags/private-property/"},{"name":"module","slug":"module","permalink":"https://zirho.github.io/tags/module/"}]},{"title":"Unit testing JavaScript ES6 code with Karma","slug":"karma-es6","date":"2016-06-06T21:55:52.000Z","updated":"2016-06-10T22:38:07.000Z","comments":true,"path":"2016/06/06/karma-es6/","link":"","permalink":"https://zirho.github.io/2016/06/06/karma-es6/","excerpt":"","text":"This posting is referenced to this post. Unit Testing ES6 codes To run unit tests against ES6 codes, we need a way to transpile the codes before the unit test runner(karma) processes them. Here we use webpack to transpile ES6 codes with babel loader using babel es2015 preset. But the original posting is outdated since babel is now split in serveral modules. We need few of them to get transpiling working. The complete code is on a github repository. Karma for es6 respository Prerequisites Install Node.jsThe best way to install Node.js is with nvm. cURL: $ curl https://raw.github.com/creationix/nvm/master/install.sh | sh Wget: $ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh Once nvm is installed, restart the terminal and run the following command to install Node.js. $ nvm install 4 Alternatively, download and run the installer. Create project directory Create a directory. 1$ mkdir karma-testing; cd karma-testing Install related modules Install node modules. 123$ npm init --y$ npm i -D karma karma-phantomjs-launcher phantomjs-prebuilt karma-jasmine jasmine-core babel-core babel-polyfill babel-loader babel-preset-es2015 webpack karma-webpack$ npm i -g karma-cli Add or change npm script attribute to package.json 123\"scripts\": &#123; \"tests\": \"karma start\"&#125;, Generate karma config file karma.conf.js 1$ vi karma.conf.js 123456789101112131415161718192021222324module.exports = function(config) &#123; config.set(&#123; browsers: ['PhantomJS'], files: [ &#123; pattern: 'test-context.js', watched: false &#125; ], frameworks: ['jasmine'], preprocessors: &#123; 'test-context.js': ['webpack'] &#125;, webpack: &#123; module: &#123; loaders: [ &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel?presets[]=es2015' &#125; ] &#125;, watch: true &#125;, webpackServer: &#123; noInfo: true &#125; &#125;);&#125;; Provide context including testing files The codes below are from this post. test-context.js 1$ vi test-context.js 1234require(\"babel-polyfill\");var context = require.context('./source', true, /-spec\\.js$/);context.keys().forEach(context); source/calculator.js 1$ vi source/calculator.js 12345678export class Calculator&#123; add(op1,op2)&#123; return op1 + op2; &#125; subtract(op1,op2)&#123; return op1 - op2; &#125;&#125; source/calculator-spec.js 1$ vi source/calculator-spec.js 12345678910111213import &#123;Calculator&#125; from './calculator';describe('Calculator', () =&gt; &#123; it('should add two numbers', () =&gt; &#123; let calculator = new Calculator(); let sum = calculator.add(1,4); expect(sum).toBe(5); &#125;); it('should subtract two numbers', () =&gt; &#123; let calculator = new Calculator(); let sum = calculator.subtract(4,1); expect(sum).toBe(3); &#125;);&#125;); Kicking off unit testing 1$ npm run tests Enjoy testing ES6 codes! The complete code is on a github repository. Karma for es6 respository","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zirho.github.io/categories/JavaScript/"},{"name":"Node.js","slug":"JavaScript/Node-js","permalink":"https://zirho.github.io/categories/JavaScript/Node-js/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zirho.github.io/tags/JavaScript/"},{"name":"es6","slug":"es6","permalink":"https://zirho.github.io/tags/es6/"},{"name":"es2015","slug":"es2015","permalink":"https://zirho.github.io/tags/es2015/"},{"name":"karma","slug":"karma","permalink":"https://zirho.github.io/tags/karma/"},{"name":"babel","slug":"babel","permalink":"https://zirho.github.io/tags/babel/"},{"name":"webpack","slug":"webpack","permalink":"https://zirho.github.io/tags/webpack/"},{"name":"Unit Testing","slug":"Unit-Testing","permalink":"https://zirho.github.io/tags/Unit-Testing/"}]},{"title":"How to setup a blog on github with Hexo","slug":"hexo","date":"2016-06-04T15:02:12.000Z","updated":"2016-06-07T01:03:19.000Z","comments":true,"path":"2016/06/04/hexo/","link":"","permalink":"https://zirho.github.io/2016/06/04/hexo/","excerpt":"","text":"You can just copy &amp; paste the codes below to setup a blog. Related links Hexo docs Hexo themes github pages Prerequisites Install Git Windows: Download &amp; install git. Mac: Install it with Homebrew, MacPorts or installer. Linux (Ubuntu, Debian): sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS): sudo yum install git-core Install Node.jsThe best way to install Node.js is with nvm. cURL: $ curl https://raw.github.com/creationix/nvm/master/install.sh | sh Wget: $ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh Once nvm is installed, restart the terminal and run the following command to install Node.js. $ nvm install 4 Alternatively, download and run the installer. Install HexoOnce all the requirements are installed, you can install Hexo with npm. $ npm install -g hexo-cli Setting up a github repository You should change {blogname} with your desired word. Setup a github repo with the name, {blogname}.github.io ex) zirho.github.io https://github.com/zirho/zirho.github.io Setting up Hexo with Github Setup a blog 1234$ hexo init &#123;blogname&#125;$ cd &#123;blogname&#125;$ npm i$ git init This will generate the {blogname} folder and install dependencies. Install a theme Browse here to find out something cool. Once you decide your mind, fork it to customize it or just get the github repo url from the theme info. ex) https://github.com/ppoffice/hexo-theme-minos 1$ git submodule add &#123;theme-github-url&#125; themes/&#123;theme-name&#125; Copy _config.yml.example to _config.yml 1$ cp themes/&#123;theme-name&#125;/_config.yml.example themes/&#123;theme-name&#125;/_config.yml *Some themes may differ on _config.yml.example file name Refer to the theme docs Update _config.yml to use newly installed theme. (Don't get confused with the theme config file) 1$ vi _config.yml Find theme attribute and change it. ex) theme: hueman 1theme: &#123;theme-name&#125; Setup blog &amp; deploy info Edit _config.yml in root folder. (Don't get confused with the theme config file) 1$ vi _config.yml Update blog info as desired. Below is my own for instance. 123456title: CodePaste subtitle:description:author: Joshua Youngjae Jilanguage: entimezone: America/Los_Angeles Add below code at the bottom of the file for deploy on github repo. 12345deploy: type: git repo: &#123;your github repo url&#125; branch: master message: \"Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;\" Deploy the blog 12$ npm i -S hexo-deployer-git$ hexo deploy At this point, you should be able to see your blog at http://{blogname}.github.io. Add the source to the github repository (optional) To maintain version of the code, you can make another branch and push the commits. 123$ git remote add origin &#123;your-git-repo-url&#125;$ git checkout -b source $ git push origin source Deploy new post Adding a new post 1$ hexo new &#123;postname&#125; Edit the new post file 1$ vi source/_posts/&#123;postname&#125;.md Regenerate files and deploy at once 1$ hexo generate -d Happy posting!","categories":[{"name":"Technology","slug":"Technology","permalink":"https://zirho.github.io/categories/Technology/"},{"name":"Github","slug":"Technology/Github","permalink":"https://zirho.github.io/categories/Technology/Github/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zirho.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://zirho.github.io/tags/blog/"},{"name":"github","slug":"github","permalink":"https://zirho.github.io/tags/github/"},{"name":"github pages","slug":"github-pages","permalink":"https://zirho.github.io/tags/github-pages/"},{"name":"deploy","slug":"deploy","permalink":"https://zirho.github.io/tags/deploy/"}]},{"title":"2012 jQuery Conference in SF","slug":"jquery-conf","date":"2012-08-31T08:20:00.000Z","updated":"2016-06-13T18:24:38.000Z","comments":true,"path":"2012/08/31/jquery-conf/","link":"","permalink":"https://zirho.github.io/2012/08/31/jquery-conf/","excerpt":"","text":"While I was staying in Los Angeles, I found that a jQuery Conference was being held in San Francisco. I was very excited about that. It was around $300 for a one day session, but totally worth the money. I drove all the way up to SF from LA. I considered flying but I just got my roadster Z4, so I drove all the way to SF. It was a lot of fun to drive! This was the first time for me to join a tech conference in US. I was kind of worried about fully comprehending it, but Ben was careful enough to talk loud and clear for all international comers. And the slide show definitly helped as well. Ben started the session by giving a basic review of jQuery. All of the attendents nodded along since most of them are aquinted with jQuery and JavaScript. Ben had a good control of speed based on the level of topic so it was very easy for me to follow along. Sharing docs from the conf. I don't think it will be a problem. Docs here You need to install nodejs. And put it in web root folder. I personally want to highlight these. Using namespace to maintain event handlers. Mange handers and objects using event boubling. IIFE Ben emphasised the IIFE part and wanted us to checkout a posting for IIFE later. Here I asked him to take a pic with me :) This was the 4th visit to SF for me there wasn't a lot of new things to do. But it was the first time taking my car so I drove around the city. It gets very cold at night so try to keep yourself warm. I hope I can make it to the next one.","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zirho.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zirho.github.io/tags/JavaScript/"},{"name":"jQuery","slug":"jQuery","permalink":"https://zirho.github.io/tags/jQuery/"},{"name":"Conference","slug":"Conference","permalink":"https://zirho.github.io/tags/Conference/"},{"name":"SF","slug":"SF","permalink":"https://zirho.github.io/tags/SF/"}]}]}